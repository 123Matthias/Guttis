<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   version="1.0"
   width="757.39948pt"
   height="177.92697pt"
   viewBox="0 0 757.39948 177.92697"
   preserveAspectRatio="xMidYMid"
   id="svg154"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs154" /><script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><g
     id="g2"
     transform="rotate(5.9745162,5556.399,-1346.4311)"><path
       style="fill:#000000;stroke-width:1.22149"
       d="m 222.0367,706.09178 c -3.61622,-0.56156 -4.14541,-1.68407 -5.1606,-10.94666 -0.76528,-6.98238 -1.27756,-9.05907 -2.31054,-9.36625 -1.80301,-0.53619 -7.09944,2.15907 -7.78343,3.96086 -0.30441,0.80189 0.14474,4.25477 0.9981,7.67305 1.47473,5.90727 1.46226,6.31377 -0.25183,8.20759 -1.38324,1.52826 -3.25567,2.15167 -8.03655,2.67566 -7.15726,0.78444 -9.6291,-0.23624 -11.54782,-4.76838 -2.38711,-5.63846 -5.97241,-21.77541 -7.08701,-31.89747 -1.44516,-13.12135 -1.04626,-19.93283 1.33385,-22.79474 2.04591,-2.46006 10.42229,-5.7524 14.48254,-5.69235 l 2.62497,0.0388 1.1712,10.68597 c 1.35275,12.34246 2.40093,14.22152 7.00818,12.56342 3.90098,-1.40393 4.38826,-3.85983 2.66615,-13.43703 -1.41417,-7.86447 -1.39896,-8.36084 0.30619,-9.9946 3.57631,-3.4266 14.52281,-2.47505 18.35906,1.59589 2.56155,2.71825 5.88035,18.79785 7.33927,35.55867 1.89444,21.76421 0.83973,25.12395 -8.12033,25.86722 -2.31029,0.19174 -5.00644,0.22329 -5.9914,0.0703 z m 23.36866,-3.46625 c -1.44846,-1.27592 -1.75364,-2.66153 -2.03252,-9.2281 -0.55119,-12.9786 3.63067,-36.73761 7.23407,-41.10014 1.58158,-1.91479 12.12319,-5.24872 14.42836,-4.56319 5.30784,1.57848 17.37001,26.41049 20.54405,42.29337 1.45217,7.26665 1.10293,7.71222 -6.7338,8.59156 -7.5498,0.84718 -9.70551,-0.43507 -10.33132,-6.14489 -0.43801,-3.99639 -0.60138,-4.22173 -2.88003,-3.97198 -4.17925,0.45805 -6.01895,3.08561 -5.49669,7.85069 0.43813,3.99744 0.32989,4.23038 -2.31463,4.98137 -9.36274,2.65881 -10.70644,2.79853 -12.41749,1.29136 z m 19.9704,-25.69951 c 0.78209,-1.00127 -2.87275,-7.59336 -4.3956,-7.92816 -1.16476,-0.25607 -2.42176,4.91674 -2.04037,8.39658 0.23155,2.11262 0.49729,2.23224 3.00905,1.35448 1.5153,-0.52953 3.05741,-1.34981 3.42692,-1.8229 z m 114.08401,11.9195 c -3.12297,-0.47227 -6.11493,-3.59244 -6.45951,-6.73639 -0.5326,-4.85938 -0.43139,-27.12329 0.15718,-34.57927 0.30251,-3.8323 1.01127,-7.60001 1.57503,-8.3727 0.56375,-0.77268 3.58689,-2.16623 6.71809,-3.09677 7.74072,-2.30044 7.67561,-2.35948 16.79768,15.23035 l 1.89407,3.65227 1.02658,-8.31473 c 1.60244,-12.97903 1.83547,-13.31224 9.57156,-13.68664 4.8005,-0.23231 7.80541,1.08604 9.57098,4.19911 4.05175,7.14413 10.72328,30.756 10.36528,36.68475 -0.29894,4.95071 -3.24219,7.85444 -9.09096,8.96899 -3.02313,0.57608 -5.32436,0.58255 -5.73165,0.0145 -0.37421,-0.52144 -0.58895,-3.6943 -0.4772,-7.05078 0.2171,-6.52008 -1.67857,-16.35178 -3.45436,-17.91609 -1.37738,-1.2133 -2.15661,3.97502 -2.23351,14.87143 -0.0753,10.66714 -1.39026,12.16582 -9.35618,10.66313 -3.1559,-0.59532 -3.28343,-0.77461 -4.93136,-6.93263 -2.48704,-9.29368 -4.16388,-13.28781 -5.51632,-13.13958 -1.75368,0.19221 -1.54744,9.0467 0.38112,16.36268 1.41285,5.35964 1.44575,6.25956 0.2724,7.44864 -1.29717,1.31455 -7.46077,2.27686 -11.07892,1.72973 z m -77.04658,6.11656 c -7.08628,-2.89655 -12.19466,-10.9326 -14.57805,-22.93281 -1.55488,-7.82868 -1.31812,-18.16792 0.47868,-20.90497 0.71015,-1.08176 3.89762,-3.16414 7.08326,-4.6275 8.34542,-3.83361 8.5776,-3.52612 8.91137,11.802 0.21456,9.85327 0.57152,12.83899 2.03923,17.0564 1.41418,4.06361 2.13597,5.07321 3.51861,4.92167 1.2983,-0.14229 1.93429,-1.3133 2.5076,-4.61719 0.65063,-3.74951 0.42885,-5.93906 -1.44999,-14.3156 -3.29211,-14.67739 -3.27773,-14.23249 -0.53209,-16.46727 1.33562,-1.08711 4.0306,-2.44198 5.98885,-3.01085 3.07943,-0.89454 3.88968,-0.74425 5.99751,1.11249 3.63751,3.20419 5.32886,8.79778 5.99625,19.83042 0.69807,11.5399 -0.44449,18.47121 -3.99015,24.2062 -4.93134,7.97629 -13.93351,11.23241 -21.97108,7.94701 z m 43.77462,-4.22083 c -4.83329,-1.37082 -10.28676,-5.38635 -11.72536,-8.63365 -1.5797,-3.5658 -0.24702,-8.25867 3.16083,-11.13051 l 2.66428,-2.24525 3.98622,4.02176 c 4.31108,4.34952 7.3019,4.67743 7.38112,0.80927 0.0347,-1.69474 -0.88499,-2.50917 -4.5943,-4.06838 -12.30128,-5.1709 -16.39324,-12.91223 -12.16417,-23.01269 3.97873,-9.50258 20.36643,-11.70854 27.54811,-3.70829 2.9009,3.23153 3.01983,6.4352 0.37356,10.06222 -2.81721,3.86132 -6.17931,4.38446 -8.87544,1.38102 -2.33812,-2.60461 -5.41414,-2.64861 -5.13189,-0.0734 0.12527,1.14299 1.88769,2.51256 5.05117,3.9253 10.77455,4.81162 13.88149,8.17928 14.72924,15.96521 0.9684,8.89069 -4.03864,15.17614 -13.39218,16.81263 -3.34659,0.58551 -6.71435,0.54618 -9.01119,-0.10526 z m 92.7144,-10.37362 c -3.10426,-2.23326 -6.32291,-18.79246 -6.6913,-34.42514 -0.36614,-15.53762 -0.35603,-15.55186 12.40238,-17.43669 13.53551,-1.99965 17.13192,-0.32004 17.42632,8.13862 l 0.13158,3.7804 -7.62044,1.11469 c -5.89546,0.86234 -7.70025,1.45935 -7.97299,2.63737 -0.64825,2.79973 1.98054,3.89871 6.32858,2.64568 5.40935,-1.55887 6.80584,-0.72601 7.36699,4.39394 0.72114,6.57959 0.32566,7.23058 -4.74014,7.80255 -5.20558,0.58774 -6.84647,1.70193 -6.10836,4.14771 0.44024,1.45876 1.24521,1.64911 4.75264,1.12385 2.32245,-0.3478 5.85465,-1.53604 7.84934,-2.6405 5.32257,-2.94711 6.17538,-2.33705 6.97868,4.99224 0.5901,5.38402 0.44142,6.42005 -1.12288,7.82401 -5.42099,4.86532 -24.90537,8.83292 -28.9804,5.90127 z m 37.43938,-3.27419 c -1.07628,-0.63118 -1.82147,-4.00836 -3.38925,-15.35967 -3.46309,-25.07419 -3.66174,-28.14164 -2.02216,-31.22515 1.7143,-3.22405 7.28615,-6.00786 12.36203,-6.1763 l 3.50798,-0.11642 0.51163,8.62865 c 0.76353,12.87713 2.86083,30.98561 4.10784,35.4679 0.99462,3.57507 0.90755,4.12659 -0.90929,5.75937 -2.34539,2.10778 -12.15858,4.20054 -14.16878,3.02162 z m 32.00403,-3.92163 c -7.65304,-2.20177 -12.94703,-6.64283 -13.45617,-11.28821 -0.28196,-2.5726 1.92648,-7.02399 4.54273,-9.15641 2.71347,-2.21167 2.26429,-2.4508 7.4735,3.97871 2.06356,2.54696 5.70786,2.6837 6.27473,0.23542 0.51884,-2.24085 0.10778,-2.59925 -7.24416,-6.31655 -7.71744,-3.90209 -10.41682,-7.15822 -11.10511,-13.39558 -0.60009,-5.43848 1.50059,-10.275 5.99224,-13.79595 6.6603,-5.22093 19.1552,-3.98647 23.63752,2.33529 2.63806,3.72068 2.62996,4.4863 -0.0928,8.77082 -2.8429,4.47357 -6.02385,5.16126 -9.36887,2.02539 -2.55686,-2.397 -5.56659,-2.60489 -5.32138,-0.36754 0.0871,0.79434 1.52047,2.12766 3.18534,2.96289 1.66488,0.83525 5.23855,2.69539 7.94149,4.13364 14.626,7.78265 11.91052,26.78542 -4.27057,29.88522 -2.89832,0.55523 -6.24394,0.55231 -8.1885,-0.007 z m 72.58822,-7.65767 c -1.32506,-0.41955 -2.37222,-1.8329 -3.099,-4.18278 -1.69531,-5.48131 -5.0862,-39.34261 -4.25275,-42.4677 0.94896,-3.55817 4.8857,-5.16496 15.52937,-6.33831 7.60075,-0.83808 8.68913,-0.73432 11.0541,1.05206 2.16755,1.63726 2.72308,2.79167 3.19795,6.64552 l 0.57467,4.66404 -7.77538,1.33468 c -7.10556,1.21971 -7.77894,1.51152 -7.81694,3.38759 -0.0537,2.65007 1.56807,3.07577 6.16514,1.6183 2.0413,-0.64719 4.25477,-1.01512 4.91883,-0.81764 1.75945,0.52323 2.89819,4.53113 2.43977,8.58698 -0.39295,3.47664 -0.47568,3.54566 -5.47645,4.56894 -3.60975,0.73865 -5.30078,1.55954 -5.85004,2.83982 -1.74338,4.06375 4.20393,3.87932 12.99372,-0.40294 3.90751,-1.90368 4.1757,-1.92007 5.5339,-0.33805 2.01643,2.34871 2.29831,11.5617 0.41141,13.44676 -3.73613,3.73252 -23.19694,8.09713 -28.54833,6.40273 z m 36.10923,-5.52074 c -1.01116,-1.72103 -2.13335,-7.03641 -3.31601,-15.70688 -1.84199,-13.50397 -1.91883,-23.77296 -0.21495,-28.722 2.18872,-6.3573 18.82933,-10.50877 26.87941,-6.70582 5.28264,2.49559 7.81393,5.5594 8.94577,10.82781 1.13648,5.29008 0.2148,10.50255 -2.65586,15.0198 l -2.21408,3.48406 1.95042,1.71806 c 1.07272,0.94496 2.7559,3.06416 3.74037,4.70939 0.98448,1.64519 2.66784,3.59939 3.74081,4.34266 1.17175,0.8117 1.80594,1.97725 1.588,2.91851 -0.58839,2.54127 -6.54514,6.19175 -10.87849,6.6667 l -3.96977,0.43509 -3.51075,-6.12876 c -2.60481,-4.54723 -3.95962,-6.07956 -5.25023,-5.9381 -1.55809,0.17077 -1.65417,0.73469 -0.92152,5.40833 0.98809,6.30321 -0.13916,7.68485 -7.5472,9.25028 -4.6524,0.98313 -4.89599,0.92271 -6.36592,-1.57913 z m 15.26063,-30.64515 c 2.92297,-3.61333 -0.21336,-9.16632 -3.7082,-6.56549 -1.99999,1.48837 -1.2869,8.70997 0.83706,8.47718 0.79946,-0.0876 2.09146,-0.94787 2.87113,-1.91168 z m 38.6826,25.99792 c -7.65304,-2.20176 -12.94703,-6.64282 -13.45617,-11.28821 -0.28196,-2.5726 1.92648,-7.02399 4.54273,-9.15641 2.71347,-2.21167 2.26429,-2.4508 7.4735,3.97872 2.06356,2.54696 5.70786,2.6837 6.27473,0.23541 0.51884,-2.24084 0.10778,-2.59925 -7.24416,-6.31654 -7.71745,-3.90209 -10.41682,-7.15822 -11.10511,-13.39558 -0.59909,-5.4386 1.50059,-10.275 5.99224,-13.79595 6.6603,-5.22093 19.1552,-3.98648 23.63752,2.33529 2.63806,3.72067 2.62996,4.48629 -0.0928,8.77081 -2.8429,4.47358 -6.02386,5.16126 -9.36887,2.02539 -2.55686,-2.39699 -5.56659,-2.60488 -5.32138,-0.36754 0.0871,0.79434 1.52047,2.12766 3.18534,2.96289 1.66487,0.83525 5.23855,2.69539 7.94149,4.13365 14.626,7.78265 11.91052,26.78541 -4.27057,29.88522 -2.89832,0.55522 -6.24395,0.55231 -8.1885,-0.007 z m 30.57625,-3.76647 c -3.10426,-2.23326 -6.3229,-18.79246 -6.69129,-34.42514 -0.36614,-15.53762 -0.35603,-15.55185 12.40237,-17.43669 13.53552,-1.99965 17.13193,-0.32004 17.42634,8.13862 l 0.13157,3.78041 -7.62045,1.11468 c -5.89545,0.86235 -7.70024,1.45935 -7.97299,2.63737 -0.64825,2.79973 1.98055,3.89871 6.32859,2.64569 5.40934,-1.55888 6.80583,-0.72601 7.36699,4.39394 0.72113,6.57959 0.32565,7.23058 -4.74015,7.80255 -5.20557,0.58774 -6.84645,1.70192 -6.10835,4.1477 0.44024,1.45876 1.24521,1.64912 4.75264,1.12385 2.32245,-0.3478 5.85465,-1.53603 7.84934,-2.6405 5.32257,-2.94711 6.17538,-2.33705 6.97868,4.99224 0.5901,5.38402 0.44141,6.42006 -1.12289,7.82401 -5.42099,4.86532 -24.90537,8.83292 -28.9804,5.90127 z m 37.46006,-3.73205 c -3.66734,-3.88071 -6.88745,-31.14092 -4.92209,-41.66853 0.89233,-4.77984 1.40528,-5.60432 5.08104,-8.16698 3.33636,-2.32603 5.36867,-2.9894 11.04717,-3.60603 12.57021,-1.36483 19.28322,3.27802 20.47612,14.16206 0.64987,5.92935 -1.43962,13.28078 -4.21303,14.82262 -1.23192,0.68485 -1.10119,1.0569 1.09928,3.12872 1.3736,1.29328 3.2797,3.65537 4.23578,5.24907 0.95608,1.59372 2.40779,3.21379 3.22604,3.60014 4.0437,1.90936 -0.71454,8.0178 -7.37352,9.46582 -5.02708,1.09316 -7.5151,-0.2018 -8.92289,-4.64419 -1.0634,-3.35563 -4.44702,-7.17759 -6.18569,-6.98703 -1.0699,0.11726 -1.15172,1.199 -0.42313,5.59493 0.89495,5.39972 0.87702,5.46788 -1.95815,7.45038 -3.40993,2.38439 -9.58864,3.26914 -11.16693,1.59902 z m 15.29897,-32.64088 c 2.0809,-4.54295 -1.20203,-8.36298 -4.48439,-5.21804 -1.62473,1.55671 -1.90704,6.20188 -0.45468,7.48123 1.39839,1.23182 3.85348,0.10683 4.93907,-2.26319 z m 38.76024,26.16357 c -7.41288,-3.86016 -18.83623,-32.18087 -16.07729,-39.85877 1.32342,-3.683 11.42753,-9.58496 15.00367,-8.76388 1.73414,0.39818 1.84302,0.95458 2.64207,13.5002 1.08584,17.04861 3.3566,22.41061 6.21119,14.66668 0.97829,-2.65387 0.9519,-5.45086 -0.14037,-14.88022 l -1.34512,-11.61203 4.13384,-2.45932 c 2.2736,-1.35262 5.55334,-2.87166 7.2883,-3.37564 6.08697,-1.76823 7.99385,4.17673 6.70532,20.90463 -0.88718,11.51742 -3.27268,21.91151 -5.92534,25.81797 -2.09147,3.08 -8.98325,6.88855 -13.31084,7.35588 -1.22898,0.13168 -3.56232,-0.45027 -5.18545,-1.29549 z m 35.50295,-2.88323 c -1.07627,-0.63117 -1.82147,-4.00836 -3.38925,-15.35966 -3.46309,-25.0742 -3.66174,-28.14165 -2.02216,-31.22515 1.7143,-3.22405 7.28615,-6.00786 12.36204,-6.17631 l 3.50797,-0.11641 0.51163,8.62864 c 0.76354,12.87714 2.86083,30.98561 4.10785,35.4679 0.99462,3.57507 0.90753,4.12659 -0.9093,5.75937 -2.34539,2.10779 -12.15857,4.20054 -14.16878,3.02162 z m 35.62001,-3.94605 c -9.66417,-2.08738 -15.90503,-9.21028 -17.87631,-20.40281 -1.46927,-8.3422 -0.22556,-14.78897 4.14711,-21.49659 9.64257,-14.79158 32.24429,-13.92633 33.92688,1.29883 0.5402,4.88291 -1.1397,8.12043 -5.45026,10.50719 -4.0661,2.25139 -5.50543,1.93433 -5.8589,-1.29071 -0.37774,-3.44653 -3.48969,-6.32171 -5.70283,-5.26892 -2.67017,1.27022 -3.91249,5.87748 -3.23979,12.01521 0.51057,4.65841 0.96309,5.69541 3.4358,7.87356 3.58305,3.15625 5.17952,2.96932 9.92075,-1.16157 2.09044,-1.82131 4.16495,-3.35139 4.61005,-3.40017 0.44509,-0.0488 2.33867,1.09137 4.20796,2.53368 4.64251,3.58206 4.96569,6.90841 1.09426,11.26252 -1.59202,1.79052 -4.57774,4.10344 -6.63493,5.13983 -3.89945,1.96447 -12.68579,3.23099 -16.5798,2.38992 z m 35.05253,-3.91554 c -1.32506,-0.41954 -2.37222,-1.8329 -3.09899,-4.18278 -1.69531,-5.48131 -5.0862,-39.3426 -4.25275,-42.4677 0.94895,-3.55817 4.88569,-5.16495 15.52937,-6.33831 7.60074,-0.83808 8.68913,-0.73432 11.05411,1.05206 2.16754,1.63726 2.72307,2.79168 3.19793,6.64552 l 0.57467,4.66404 -7.77538,1.33469 c -7.10557,1.2197 -7.77894,1.51152 -7.81695,3.38759 -0.0537,2.65006 1.56807,3.07577 6.16514,1.61829 2.0413,-0.64719 4.25477,-1.01512 4.91884,-0.81763 1.75944,0.52322 2.89819,4.53113 2.43976,8.58698 -0.39295,3.47663 -0.47568,3.54565 -5.47644,4.56894 -3.60976,0.73864 -5.30078,1.55953 -5.85004,2.83981 -1.74338,4.06375 4.20392,3.87932 12.99371,-0.40294 3.90751,-1.90367 4.17571,-1.92005 5.53391,-0.33805 2.01643,2.34871 2.2983,11.5617 0.41142,13.44677 -3.73615,3.73252 -23.19696,8.09712 -28.54834,6.40272 z m -351.42328,36.89331 c -1.34213,-1.18225 -1.6657,-2.53936 -1.73775,-7.28804 -0.19797,-13.05094 -0.9401,-22.2052 -1.89853,-23.41869 -0.84903,-1.07496 -1.73406,-1.00028 -5.82356,0.4914 -4.22388,1.54068 -5.01444,1.58983 -6.36974,0.39598 -1.33665,-1.17743 -1.50738,-2.23439 -1.25388,-7.76253 0.44088,-9.61452 1.2589,-10.41763 10.90751,-10.70865 5.09469,-0.15368 9.76742,-0.86521 13.03231,-1.98447 9.53093,-3.26741 10.32421,-3.37669 11.25719,-1.55078 4.03859,7.90378 2.94718,16.2702 -2.21074,16.94681 -0.78228,0.10264 -2.24201,1.09218 -3.24383,2.19903 -1.81797,2.00859 -1.81722,2.03214 0.38198,12.26147 1.21191,5.63697 2.59672,11.76607 3.07738,13.62023 0.8126,3.13461 0.67294,3.50545 -1.99017,5.28421 -3.85171,2.57264 -11.94214,3.43965 -14.12817,1.51396 z"
       id="path3" /><path
       d="m 936.27946,634.90925 c 1.82963,1.18753 5.66745,19.82458 3.26344,21.94342 l -0.80034,10.28284 -180.57747,21.26932 c -90.88045,9.55686 -207.41671,21.45758 -214.41287,20.42404 -6.69479,-1.53942 -15.1762,-18.15622 -16.45786,-22.69584 -3.0772,-7.60899 44.65432,-1.54823 212.86831,-20.43583 98.21215,-10.91095 194.19804,-32.43414 196.11679,-30.78795 z"
       id="path209"
       style="fill:#000000;stroke:none;stroke-width:0.42819" /><path
       style="fill:#000000;stroke-width:1.33221"
       d="m 293.33037,624.64318 c -12.16094,-3.372 -19.71248,-20.64141 -17.39244,-39.7743 1.7737,-14.62728 9.51937,-23.94036 20.95342,-25.19355 10.82795,-1.18676 19.74855,6.55812 18.09914,15.71371 -0.49721,2.75996 -6.78443,9.38678 -9.15193,9.64626 -1.2403,0.13594 -2.47395,-0.69737 -3.16283,-2.13647 -2.00392,-4.18617 -4.20296,-4.8026 -6.08906,-1.70685 -2.20339,3.6165 -1.54865,16.18603 1.15842,22.23904 2.14236,4.79029 5.86292,7.01424 7.66862,4.58387 1.75398,-2.36079 1.0468,-5.36306 -1.70212,-7.22635 -5.31006,-3.59926 -1.32528,-10.39533 7.35313,-12.54079 4.03279,-0.99698 4.94542,-0.84269 6.87176,1.16176 1.97283,2.05282 2.28623,3.23301 2.80133,10.54944 0.73381,10.42297 -1.37798,16.47215 -7.48698,21.44644 -4.82415,3.92809 -12.77204,5.21992 -19.92046,3.23779 z m 45.12201,-5.18488 c -4.59422,-2.17684 -6.51165,-4.36114 -9.57328,-10.90573 -3.10811,-6.64396 -5.05485,-17.48464 -4.64142,-25.8463 0.29856,-6.03807 0.61561,-6.87485 3.52116,-9.29316 1.75619,-1.4617 4.64241,-2.92845 6.41384,-3.25946 l 3.22077,-0.60187 1.31302,14.74426 c 1.36028,15.27486 2.77718,20.88261 5.20904,20.61608 2.32807,-0.25516 2.65963,-5.91559 0.94522,-16.137 -0.8818,-5.25736 -2.00476,-11.14396 -2.49544,-13.08131 -0.73739,-2.91131 -0.54895,-3.88595 1.08605,-5.61732 1.08804,-1.15215 3.61716,-2.37703 5.62027,-2.72194 3.08764,-0.53165 3.97959,-0.17091 5.85958,2.36991 1.9723,2.6656 2.37761,4.45757 3.66507,16.20433 1.34018,12.22783 1.31676,13.71433 -0.31601,20.04414 -3.02388,11.72279 -11.45121,17.45441 -19.82787,13.48537 z m 99.1839,-9.73407 c -0.99168,-0.69915 -1.9405,-5.93301 -4.00154,-22.07321 -2.26385,-17.72843 -2.53138,-21.61147 -1.651,-23.96288 1.23575,-3.30059 6.04539,-6.08475 10.40886,-6.02538 l 3.09223,0.0421 0.49437,8.53515 c 0.72033,12.43604 2.8158,30.61321 4.00831,34.77016 0.8722,3.04036 0.744,3.90841 -0.82209,5.56681 -2.24524,2.37758 -9.72476,4.41938 -11.52914,3.14729 z m -61.23483,4.95183 c -0.81215,-1.00848 -1.47137,-5.9055 -2.211,-16.4243 l -1.05384,-14.98741 -5.54718,0.9549 -5.54718,0.95489 -0.46801,-6.12895 c -0.80819,-10.58403 -0.17546,-11.27228 12.20794,-13.27916 5.85463,-0.94882 11.81917,-2.20676 13.25455,-2.79541 2.33175,-0.95631 2.76282,-0.72578 4.04643,2.16393 0.79018,1.77884 1.5284,5.2231 1.64051,7.6539 0.18659,4.04572 -0.13203,4.68249 -3.76583,7.52616 l -3.96966,3.1065 1.55305,9.18341 c 0.85416,5.05088 2.05077,11.4691 2.65912,14.2627 1.02664,4.71443 0.95072,5.19578 -1.05705,6.70101 -2.95221,2.21328 -10.29381,2.90595 -11.74185,1.10783 z m 34.45653,-3.91482 c -1.38618,-1.44239 -1.68741,-2.83442 -1.66005,-7.6713 0.0184,-3.25002 -0.38518,-9.72846 -0.8968,-14.39652 l -0.93023,-8.48736 -5.23023,0.57324 -5.23023,0.57324 -0.61376,-6.54649 c -0.93626,-9.98681 0.0545,-11.14348 10.52788,-12.29138 4.68349,-0.51332 10.46947,-1.76018 12.85773,-2.77078 4.88755,-2.06822 5.53211,-1.6356 7.23444,4.85578 1.63409,6.23112 0.8373,9.25148 -3.19517,12.11186 l -3.65777,2.5946 0.78992,7.20719 c 0.43445,3.96397 1.56117,10.07582 2.50381,13.58191 2.20497,8.20128 1.32969,9.93278 -5.75772,11.3901 -3.9465,0.8115 -5.41798,0.65338 -6.74184,-0.72409 z"
       id="path5" /><path
       style="fill:#000000;stroke-width:1.17595"
       d="m 488.68972,604.16391 c -6.80292,0.23562 -12.55129,-3.77766 -12.22076,-8.53205 0.16702,-2.40192 2.7977,-7.76363 4.04808,-8.25047 0.33591,-0.13078 1.69222,0.86842 3.01406,2.22047 2.8759,2.94164 4.98495,3.24087 6.07165,0.86144 1.07629,-2.35665 0.0131,-3.22123 -5.06462,-4.11849 -5.96553,-1.05413 -9.56265,-3.91605 -10.69851,-8.51182 -1.79577,-7.26578 1.9918,-14.57573 8.95755,-17.28797 9.10642,-3.54572 16.73372,2.27486 12.72465,9.71049 -2.03646,3.77705 -3.50077,4.26542 -6.92331,2.30895 -2.04392,-1.16837 -2.96232,-1.23732 -3.41046,-0.25608 -0.88286,1.9331 0.38587,2.84235 5.13749,3.68201 10.53891,1.86228 15.5902,10.20782 11.54265,19.07038 -2.41058,5.27823 -7.67174,8.91243 -13.17847,9.10314 z m -35.77913,-38.02929 c -2.31728,-3.10225 -0.69728,-18.74209 -2.58116,-24.40776 5.09797,2.09061 15.81522,10.73848 17.05536,12.50649 1.17859,1.68026 1.26555,10.21673 1.09127,15.88102 -0.0906,2.9427 -4.59339,28.48908 -4.26321,18.38645 0.0563,-1.72215 1.72315,-15.54533 -1.05985,-17.13151 -2.80197,-1.597 -8.76901,-5.60304 -10.24237,-5.2347 z"
       id="path6" /></g></svg>
